<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="1986"><g><title>_int_realloc (7 samples, 0.35%)</title><rect x="0.0000%" y="437" width="0.3525%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.20%)</title><rect x="0.3525%" y="437" width="0.2014%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="4"/><text x="0.6025%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.20%)</title><rect x="0.3525%" y="421" width="0.2014%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="4"/><text x="0.6025%" y="431.50"></text></g><g><title>[[heap]] (19 samples, 0.96%)</title><rect x="0.0000%" y="453" width="0.9567%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="19"/><text x="0.2500%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.40%)</title><rect x="0.5539%" y="437" width="0.4028%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="8"/><text x="0.8039%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.30%)</title><rect x="0.6546%" y="421" width="0.3021%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="6"/><text x="0.9046%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.30%)</title><rect x="0.6546%" y="405" width="0.3021%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="6"/><text x="0.9046%" y="415.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.30%)</title><rect x="0.6546%" y="389" width="0.3021%" height="15" fill="rgb(228,23,34)" fg:x="13" fg:w="6"/><text x="0.9046%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.25%)</title><rect x="0.9567%" y="437" width="0.2518%" height="15" fill="rgb(218,30,26)" fg:x="19" fg:w="5"/><text x="1.2067%" y="447.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.30%)</title><rect x="1.2085%" y="437" width="0.3021%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="6"/><text x="1.4585%" y="447.50"></text></g><g><title>__rdl_realloc (6 samples, 0.30%)</title><rect x="1.5106%" y="437" width="0.3021%" height="15" fill="rgb(250,228,42)" fg:x="30" fg:w="6"/><text x="1.7606%" y="447.50"></text></g><g><title>_int_free (16 samples, 0.81%)</title><rect x="1.8127%" y="437" width="0.8056%" height="15" fill="rgb(240,193,28)" fg:x="36" fg:w="16"/><text x="2.0627%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.40%)</title><rect x="2.6687%" y="357" width="0.4028%" height="15" fill="rgb(216,20,37)" fg:x="53" fg:w="8"/><text x="2.9187%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.40%)</title><rect x="2.6687%" y="341" width="0.4028%" height="15" fill="rgb(206,188,39)" fg:x="53" fg:w="8"/><text x="2.9187%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.40%)</title><rect x="2.6687%" y="325" width="0.4028%" height="15" fill="rgb(217,207,13)" fg:x="53" fg:w="8"/><text x="2.9187%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.40%)</title><rect x="2.6687%" y="309" width="0.4028%" height="15" fill="rgb(231,73,38)" fg:x="53" fg:w="8"/><text x="2.9187%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.40%)</title><rect x="2.6687%" y="293" width="0.4028%" height="15" fill="rgb(225,20,46)" fg:x="53" fg:w="8"/><text x="2.9187%" y="303.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.40%)</title><rect x="2.6687%" y="277" width="0.4028%" height="15" fill="rgb(210,31,41)" fg:x="53" fg:w="8"/><text x="2.9187%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.45%)</title><rect x="2.6687%" y="421" width="0.4532%" height="15" fill="rgb(221,200,47)" fg:x="53" fg:w="9"/><text x="2.9187%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.45%)</title><rect x="2.6687%" y="405" width="0.4532%" height="15" fill="rgb(226,26,5)" fg:x="53" fg:w="9"/><text x="2.9187%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.45%)</title><rect x="2.6687%" y="389" width="0.4532%" height="15" fill="rgb(249,33,26)" fg:x="53" fg:w="9"/><text x="2.9187%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.45%)</title><rect x="2.6687%" y="373" width="0.4532%" height="15" fill="rgb(235,183,28)" fg:x="53" fg:w="9"/><text x="2.9187%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.05%)</title><rect x="3.0715%" y="357" width="0.0504%" height="15" fill="rgb(221,5,38)" fg:x="61" fg:w="1"/><text x="3.3215%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="3.0715%" y="341" width="0.0504%" height="15" fill="rgb(247,18,42)" fg:x="61" fg:w="1"/><text x="3.3215%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.15%)</title><rect x="3.1219%" y="421" width="0.1511%" height="15" fill="rgb(241,131,45)" fg:x="62" fg:w="3"/><text x="3.3719%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.15%)</title><rect x="3.1219%" y="405" width="0.1511%" height="15" fill="rgb(249,31,29)" fg:x="62" fg:w="3"/><text x="3.3719%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.35%)</title><rect x="3.2729%" y="293" width="0.3525%" height="15" fill="rgb(225,111,53)" fg:x="65" fg:w="7"/><text x="3.5229%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.35%)</title><rect x="3.2729%" y="277" width="0.3525%" height="15" fill="rgb(238,160,17)" fg:x="65" fg:w="7"/><text x="3.5229%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.35%)</title><rect x="3.2729%" y="261" width="0.3525%" height="15" fill="rgb(214,148,48)" fg:x="65" fg:w="7"/><text x="3.5229%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.35%)</title><rect x="3.2729%" y="245" width="0.3525%" height="15" fill="rgb(232,36,49)" fg:x="65" fg:w="7"/><text x="3.5229%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.35%)</title><rect x="3.2729%" y="229" width="0.3525%" height="15" fill="rgb(209,103,24)" fg:x="65" fg:w="7"/><text x="3.5229%" y="239.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.35%)</title><rect x="3.2729%" y="213" width="0.3525%" height="15" fill="rgb(229,88,8)" fg:x="65" fg:w="7"/><text x="3.5229%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.86%)</title><rect x="3.2729%" y="357" width="0.8560%" height="15" fill="rgb(213,181,19)" fg:x="65" fg:w="17"/><text x="3.5229%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.86%)</title><rect x="3.2729%" y="341" width="0.8560%" height="15" fill="rgb(254,191,54)" fg:x="65" fg:w="17"/><text x="3.5229%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.86%)</title><rect x="3.2729%" y="325" width="0.8560%" height="15" fill="rgb(241,83,37)" fg:x="65" fg:w="17"/><text x="3.5229%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.86%)</title><rect x="3.2729%" y="309" width="0.8560%" height="15" fill="rgb(233,36,39)" fg:x="65" fg:w="17"/><text x="3.5229%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (10 samples, 0.50%)</title><rect x="3.6254%" y="293" width="0.5035%" height="15" fill="rgb(226,3,54)" fg:x="72" fg:w="10"/><text x="3.8754%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.50%)</title><rect x="3.6254%" y="277" width="0.5035%" height="15" fill="rgb(245,192,40)" fg:x="72" fg:w="10"/><text x="3.8754%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.10%)</title><rect x="4.1289%" y="357" width="0.1007%" height="15" fill="rgb(238,167,29)" fg:x="82" fg:w="2"/><text x="4.3789%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (28 samples, 1.41%)</title><rect x="3.2729%" y="421" width="1.4099%" height="15" fill="rgb(232,182,51)" fg:x="65" fg:w="28"/><text x="3.5229%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (28 samples, 1.41%)</title><rect x="3.2729%" y="405" width="1.4099%" height="15" fill="rgb(231,60,39)" fg:x="65" fg:w="28"/><text x="3.5229%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (28 samples, 1.41%)</title><rect x="3.2729%" y="389" width="1.4099%" height="15" fill="rgb(208,69,12)" fg:x="65" fg:w="28"/><text x="3.5229%" y="399.50"></text></g><g><title>aoc_2023_23::find_longest_path2::_{{closure}} (28 samples, 1.41%)</title><rect x="3.2729%" y="373" width="1.4099%" height="15" fill="rgb(235,93,37)" fg:x="65" fg:w="28"/><text x="3.5229%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;aoc_common::position::Position&gt;&gt; (9 samples, 0.45%)</title><rect x="4.2296%" y="357" width="0.4532%" height="15" fill="rgb(213,116,39)" fg:x="84" fg:w="9"/><text x="4.4796%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;aoc_common::position::Position&gt;&gt; (9 samples, 0.45%)</title><rect x="4.2296%" y="341" width="0.4532%" height="15" fill="rgb(222,207,29)" fg:x="84" fg:w="9"/><text x="4.4796%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.45%)</title><rect x="4.2296%" y="325" width="0.4532%" height="15" fill="rgb(206,96,30)" fg:x="84" fg:w="9"/><text x="4.4796%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.45%)</title><rect x="4.2296%" y="309" width="0.4532%" height="15" fill="rgb(218,138,4)" fg:x="84" fg:w="9"/><text x="4.4796%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.45%)</title><rect x="4.2296%" y="293" width="0.4532%" height="15" fill="rgb(250,191,14)" fg:x="84" fg:w="9"/><text x="4.4796%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::last (2 samples, 0.10%)</title><rect x="4.6828%" y="421" width="0.1007%" height="15" fill="rgb(239,60,40)" fg:x="93" fg:w="2"/><text x="4.9328%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.10%)</title><rect x="4.6828%" y="405" width="0.1007%" height="15" fill="rgb(206,27,48)" fg:x="93" fg:w="2"/><text x="4.9328%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;aoc_common::position::Position&gt;&gt; (2 samples, 0.10%)</title><rect x="4.6828%" y="389" width="0.1007%" height="15" fill="rgb(225,35,8)" fg:x="93" fg:w="2"/><text x="4.9328%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.10%)</title><rect x="4.6828%" y="373" width="0.1007%" height="15" fill="rgb(250,213,24)" fg:x="93" fg:w="2"/><text x="4.9328%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;aoc_common::position::Position,alloc::alloc::Global&gt;&gt; (2 samples, 0.10%)</title><rect x="4.6828%" y="357" width="0.1007%" height="15" fill="rgb(247,123,22)" fg:x="93" fg:w="2"/><text x="4.9328%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.10%)</title><rect x="4.6828%" y="341" width="0.1007%" height="15" fill="rgb(231,138,38)" fg:x="93" fg:w="2"/><text x="4.9328%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;aoc_common::position::Position&gt;&gt; (2 samples, 0.10%)</title><rect x="4.6828%" y="325" width="0.1007%" height="15" fill="rgb(231,145,46)" fg:x="93" fg:w="2"/><text x="4.9328%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.10%)</title><rect x="4.6828%" y="309" width="0.1007%" height="15" fill="rgb(251,118,11)" fg:x="93" fg:w="2"/><text x="4.9328%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.10%)</title><rect x="4.6828%" y="293" width="0.1007%" height="15" fill="rgb(217,147,25)" fg:x="93" fg:w="2"/><text x="4.9328%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.10%)</title><rect x="4.6828%" y="277" width="0.1007%" height="15" fill="rgb(247,81,37)" fg:x="93" fg:w="2"/><text x="4.9328%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;aoc_common::position::Position&gt;&gt; (2 samples, 0.10%)</title><rect x="4.7835%" y="421" width="0.1007%" height="15" fill="rgb(209,12,38)" fg:x="95" fg:w="2"/><text x="5.0335%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;aoc_common::position::Position&gt;&gt; (2 samples, 0.10%)</title><rect x="4.7835%" y="405" width="0.1007%" height="15" fill="rgb(227,1,9)" fg:x="95" fg:w="2"/><text x="5.0335%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.10%)</title><rect x="4.7835%" y="389" width="0.1007%" height="15" fill="rgb(248,47,43)" fg:x="95" fg:w="2"/><text x="5.0335%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.10%)</title><rect x="4.7835%" y="373" width="0.1007%" height="15" fill="rgb(221,10,30)" fg:x="95" fg:w="2"/><text x="5.0335%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.10%)</title><rect x="4.7835%" y="357" width="0.1007%" height="15" fill="rgb(210,229,1)" fg:x="95" fg:w="2"/><text x="5.0335%" y="367.50"></text></g><g><title>[[stack]] (81 samples, 4.08%)</title><rect x="0.9567%" y="453" width="4.0785%" height="15" fill="rgb(222,148,37)" fg:x="19" fg:w="81"/><text x="1.2067%" y="463.50">[[st..</text></g><g><title>aoc_2023_23::find_longest_path2 (48 samples, 2.42%)</title><rect x="2.6183%" y="437" width="2.4169%" height="15" fill="rgb(234,67,33)" fg:x="52" fg:w="48"/><text x="2.8683%" y="447.50">ao..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.15%)</title><rect x="4.8842%" y="421" width="0.1511%" height="15" fill="rgb(247,98,35)" fg:x="97" fg:w="3"/><text x="5.1342%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.15%)</title><rect x="4.8842%" y="405" width="0.1511%" height="15" fill="rgb(247,138,52)" fg:x="97" fg:w="3"/><text x="5.1342%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.15%)</title><rect x="4.8842%" y="389" width="0.1511%" height="15" fill="rgb(213,79,30)" fg:x="97" fg:w="3"/><text x="5.1342%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.15%)</title><rect x="4.8842%" y="373" width="0.1511%" height="15" fill="rgb(246,177,23)" fg:x="97" fg:w="3"/><text x="5.1342%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.21%)</title><rect x="5.0352%" y="437" width="1.2085%" height="15" fill="rgb(230,62,27)" fg:x="100" fg:w="24"/><text x="5.2852%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.20%)</title><rect x="6.0423%" y="421" width="0.2014%" height="15" fill="rgb(216,154,8)" fg:x="120" fg:w="4"/><text x="6.2923%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.20%)</title><rect x="6.0423%" y="405" width="0.2014%" height="15" fill="rgb(244,35,45)" fg:x="120" fg:w="4"/><text x="6.2923%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.20%)</title><rect x="6.0423%" y="389" width="0.2014%" height="15" fill="rgb(251,115,12)" fg:x="120" fg:w="4"/><text x="6.2923%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.20%)</title><rect x="6.0423%" y="373" width="0.2014%" height="15" fill="rgb(240,54,50)" fg:x="120" fg:w="4"/><text x="6.2923%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.20%)</title><rect x="6.0423%" y="357" width="0.2014%" height="15" fill="rgb(233,84,52)" fg:x="120" fg:w="4"/><text x="6.2923%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.20%)</title><rect x="6.0423%" y="341" width="0.2014%" height="15" fill="rgb(207,117,47)" fg:x="120" fg:w="4"/><text x="6.2923%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.20%)</title><rect x="6.0423%" y="325" width="0.2014%" height="15" fill="rgb(249,43,39)" fg:x="120" fg:w="4"/><text x="6.2923%" y="335.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.20%)</title><rect x="6.0423%" y="309" width="0.2014%" height="15" fill="rgb(209,38,44)" fg:x="120" fg:w="4"/><text x="6.2923%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="437" width="0.0504%" height="15" fill="rgb(236,212,23)" fg:x="124" fg:w="1"/><text x="6.4937%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="421" width="0.0504%" height="15" fill="rgb(242,79,21)" fg:x="124" fg:w="1"/><text x="6.4937%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="405" width="0.0504%" height="15" fill="rgb(211,96,35)" fg:x="124" fg:w="1"/><text x="6.4937%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="389" width="0.0504%" height="15" fill="rgb(253,215,40)" fg:x="124" fg:w="1"/><text x="6.4937%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="373" width="0.0504%" height="15" fill="rgb(211,81,21)" fg:x="124" fg:w="1"/><text x="6.4937%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="357" width="0.0504%" height="15" fill="rgb(208,190,38)" fg:x="124" fg:w="1"/><text x="6.4937%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="341" width="0.0504%" height="15" fill="rgb(235,213,38)" fg:x="124" fg:w="1"/><text x="6.4937%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="325" width="0.0504%" height="15" fill="rgb(237,122,38)" fg:x="124" fg:w="1"/><text x="6.4937%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="309" width="0.0504%" height="15" fill="rgb(244,218,35)" fg:x="124" fg:w="1"/><text x="6.4937%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="293" width="0.0504%" height="15" fill="rgb(240,68,47)" fg:x="124" fg:w="1"/><text x="6.4937%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="277" width="0.0504%" height="15" fill="rgb(210,16,53)" fg:x="124" fg:w="1"/><text x="6.4937%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="261" width="0.0504%" height="15" fill="rgb(235,124,12)" fg:x="124" fg:w="1"/><text x="6.4937%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="245" width="0.0504%" height="15" fill="rgb(224,169,11)" fg:x="124" fg:w="1"/><text x="6.4937%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="229" width="0.0504%" height="15" fill="rgb(250,166,2)" fg:x="124" fg:w="1"/><text x="6.4937%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="213" width="0.0504%" height="15" fill="rgb(242,216,29)" fg:x="124" fg:w="1"/><text x="6.4937%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="197" width="0.0504%" height="15" fill="rgb(230,116,27)" fg:x="124" fg:w="1"/><text x="6.4937%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="181" width="0.0504%" height="15" fill="rgb(228,99,48)" fg:x="124" fg:w="1"/><text x="6.4937%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="165" width="0.0504%" height="15" fill="rgb(253,11,6)" fg:x="124" fg:w="1"/><text x="6.4937%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="149" width="0.0504%" height="15" fill="rgb(247,143,39)" fg:x="124" fg:w="1"/><text x="6.4937%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="6.2437%" y="133" width="0.0504%" height="15" fill="rgb(236,97,10)" fg:x="124" fg:w="1"/><text x="6.4937%" y="143.50"></text></g><g><title>__GI___libc_free (39 samples, 1.96%)</title><rect x="6.2941%" y="437" width="1.9637%" height="15" fill="rgb(233,208,19)" fg:x="125" fg:w="39"/><text x="6.5441%" y="447.50">_..</text></g><g><title>__GI___libc_malloc (25 samples, 1.26%)</title><rect x="8.2578%" y="437" width="1.2588%" height="15" fill="rgb(216,164,2)" fg:x="164" fg:w="25"/><text x="8.5078%" y="447.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.60%)</title><rect x="9.5166%" y="437" width="0.6042%" height="15" fill="rgb(220,129,5)" fg:x="189" fg:w="12"/><text x="9.7666%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.50%)</title><rect x="10.1208%" y="437" width="0.5035%" height="15" fill="rgb(242,17,10)" fg:x="201" fg:w="10"/><text x="10.3708%" y="447.50"></text></g><g><title>__rdl_realloc (1 samples, 0.05%)</title><rect x="10.6244%" y="437" width="0.0504%" height="15" fill="rgb(242,107,0)" fg:x="211" fg:w="1"/><text x="10.8744%" y="447.50"></text></g><g><title>_int_free (29 samples, 1.46%)</title><rect x="10.6747%" y="437" width="1.4602%" height="15" fill="rgb(251,28,31)" fg:x="212" fg:w="29"/><text x="10.9247%" y="447.50"></text></g><g><title>_int_malloc (16 samples, 0.81%)</title><rect x="12.1349%" y="437" width="0.8056%" height="15" fill="rgb(233,223,10)" fg:x="241" fg:w="16"/><text x="12.3849%" y="447.50"></text></g><g><title>_int_realloc (11 samples, 0.55%)</title><rect x="12.9406%" y="437" width="0.5539%" height="15" fill="rgb(215,21,27)" fg:x="257" fg:w="11"/><text x="13.1906%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.40%)</title><rect x="13.4945%" y="437" width="0.4028%" height="15" fill="rgb(232,23,21)" fg:x="268" fg:w="8"/><text x="13.7445%" y="447.50"></text></g><g><title>[unknown] (186 samples, 9.37%)</title><rect x="5.0352%" y="453" width="9.3656%" height="15" fill="rgb(244,5,23)" fg:x="100" fg:w="186"/><text x="5.2852%" y="463.50">[unknown]</text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.50%)</title><rect x="13.8973%" y="437" width="0.5035%" height="15" fill="rgb(226,81,46)" fg:x="276" fg:w="10"/><text x="14.1473%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.25%)</title><rect x="14.1490%" y="421" width="0.2518%" height="15" fill="rgb(247,70,30)" fg:x="281" fg:w="5"/><text x="14.3990%" y="431.50"></text></g><g><title>&lt;aoc_common::position::Position as core::hash::Hash&gt;::hash (5 samples, 0.25%)</title><rect x="14.1490%" y="405" width="0.2518%" height="15" fill="rgb(212,68,19)" fg:x="281" fg:w="5"/><text x="14.3990%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (5 samples, 0.25%)</title><rect x="14.1490%" y="389" width="0.2518%" height="15" fill="rgb(240,187,13)" fg:x="281" fg:w="5"/><text x="14.3990%" y="399.50"></text></g><g><title>core::hash::Hasher::write_i32 (5 samples, 0.25%)</title><rect x="14.1490%" y="373" width="0.2518%" height="15" fill="rgb(223,113,26)" fg:x="281" fg:w="5"/><text x="14.3990%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u32 (5 samples, 0.25%)</title><rect x="14.1490%" y="357" width="0.2518%" height="15" fill="rgb(206,192,2)" fg:x="281" fg:w="5"/><text x="14.3990%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.15%)</title><rect x="15.5589%" y="261" width="0.1511%" height="15" fill="rgb(241,108,4)" fg:x="309" fg:w="3"/><text x="15.8089%" y="271.50"></text></g><g><title>checked_request2size (2 samples, 0.10%)</title><rect x="16.5156%" y="101" width="0.1007%" height="15" fill="rgb(247,173,49)" fg:x="328" fg:w="2"/><text x="16.7656%" y="111.50"></text></g><g><title>__GI___libc_malloc (27 samples, 1.36%)</title><rect x="15.7603%" y="117" width="1.3595%" height="15" fill="rgb(224,114,35)" fg:x="313" fg:w="27"/><text x="16.0103%" y="127.50"></text></g><g><title>tcache_get (10 samples, 0.50%)</title><rect x="16.6163%" y="101" width="0.5035%" height="15" fill="rgb(245,159,27)" fg:x="330" fg:w="10"/><text x="16.8663%" y="111.50"></text></g><g><title>__rdl_alloc (3 samples, 0.15%)</title><rect x="17.1198%" y="117" width="0.1511%" height="15" fill="rgb(245,172,44)" fg:x="340" fg:w="3"/><text x="17.3698%" y="127.50"></text></g><g><title>__rust_alloc (4 samples, 0.20%)</title><rect x="17.2709%" y="117" width="0.2014%" height="15" fill="rgb(236,23,11)" fg:x="343" fg:w="4"/><text x="17.5209%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 1.86%)</title><rect x="15.7603%" y="165" width="1.8630%" height="15" fill="rgb(205,117,38)" fg:x="313" fg:w="37"/><text x="16.0103%" y="175.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 1.86%)</title><rect x="15.7603%" y="149" width="1.8630%" height="15" fill="rgb(237,72,25)" fg:x="313" fg:w="37"/><text x="16.0103%" y="159.50">a..</text></g><g><title>alloc::alloc::alloc (37 samples, 1.86%)</title><rect x="15.7603%" y="133" width="1.8630%" height="15" fill="rgb(244,70,9)" fg:x="313" fg:w="37"/><text x="16.0103%" y="143.50">a..</text></g><g><title>core::ptr::read_volatile (3 samples, 0.15%)</title><rect x="17.4723%" y="117" width="0.1511%" height="15" fill="rgb(217,125,39)" fg:x="347" fg:w="3"/><text x="17.7223%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 1.96%)</title><rect x="15.7100%" y="213" width="1.9637%" height="15" fill="rgb(235,36,10)" fg:x="312" fg:w="39"/><text x="15.9600%" y="223.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 1.96%)</title><rect x="15.7100%" y="197" width="1.9637%" height="15" fill="rgb(251,123,47)" fg:x="312" fg:w="39"/><text x="15.9600%" y="207.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 1.96%)</title><rect x="15.7100%" y="181" width="1.9637%" height="15" fill="rgb(221,13,13)" fg:x="312" fg:w="39"/><text x="15.9600%" y="191.50">a..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.05%)</title><rect x="17.6234%" y="165" width="0.0504%" height="15" fill="rgb(238,131,9)" fg:x="350" fg:w="1"/><text x="17.8734%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.05%)</title><rect x="17.6234%" y="149" width="0.0504%" height="15" fill="rgb(211,50,8)" fg:x="350" fg:w="1"/><text x="17.8734%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (57 samples, 2.87%)</title><rect x="15.5589%" y="277" width="2.8701%" height="15" fill="rgb(245,182,24)" fg:x="309" fg:w="57"/><text x="15.8089%" y="287.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (54 samples, 2.72%)</title><rect x="15.7100%" y="261" width="2.7190%" height="15" fill="rgb(242,14,37)" fg:x="312" fg:w="54"/><text x="15.9600%" y="271.50">al..</text></g><g><title>alloc::slice::hack::to_vec (54 samples, 2.72%)</title><rect x="15.7100%" y="245" width="2.7190%" height="15" fill="rgb(246,228,12)" fg:x="312" fg:w="54"/><text x="15.9600%" y="255.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (54 samples, 2.72%)</title><rect x="15.7100%" y="229" width="2.7190%" height="15" fill="rgb(213,55,15)" fg:x="312" fg:w="54"/><text x="15.9600%" y="239.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.76%)</title><rect x="17.6737%" y="213" width="0.7553%" height="15" fill="rgb(209,9,3)" fg:x="351" fg:w="15"/><text x="17.9237%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.76%)</title><rect x="17.6737%" y="197" width="0.7553%" height="15" fill="rgb(230,59,30)" fg:x="351" fg:w="15"/><text x="17.9237%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (15 samples, 0.76%)</title><rect x="17.6737%" y="181" width="0.7553%" height="15" fill="rgb(209,121,21)" fg:x="351" fg:w="15"/><text x="17.9237%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.40%)</title><rect x="18.4290%" y="277" width="0.4028%" height="15" fill="rgb(220,109,13)" fg:x="366" fg:w="8"/><text x="18.6790%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.05%)</title><rect x="18.7815%" y="261" width="0.0504%" height="15" fill="rgb(232,18,1)" fg:x="373" fg:w="1"/><text x="19.0315%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.05%)</title><rect x="18.7815%" y="245" width="0.0504%" height="15" fill="rgb(215,41,42)" fg:x="373" fg:w="1"/><text x="19.0315%" y="255.50"></text></g><g><title>&lt;aoc_common::position::Position as core::cmp::PartialEq&gt;::eq (2 samples, 0.10%)</title><rect x="18.8318%" y="277" width="0.1007%" height="15" fill="rgb(224,123,36)" fg:x="374" fg:w="2"/><text x="19.0818%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.15%)</title><rect x="18.9325%" y="261" width="0.1511%" height="15" fill="rgb(240,125,3)" fg:x="376" fg:w="3"/><text x="19.1825%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (8 samples, 0.40%)</title><rect x="18.9325%" y="277" width="0.4028%" height="15" fill="rgb(205,98,50)" fg:x="376" fg:w="8"/><text x="19.1825%" y="287.50"></text></g><g><title>aoc_2023_23::find_longest_path2::_{{closure}} (5 samples, 0.25%)</title><rect x="19.0836%" y="261" width="0.2518%" height="15" fill="rgb(205,185,37)" fg:x="379" fg:w="5"/><text x="19.3336%" y="271.50"></text></g><g><title>&lt;aoc_common::position::Position as core::cmp::PartialEq&gt;::eq (5 samples, 0.25%)</title><rect x="19.0836%" y="245" width="0.2518%" height="15" fill="rgb(238,207,15)" fg:x="379" fg:w="5"/><text x="19.3336%" y="255.50"></text></g><g><title>__GI___libc_free (17 samples, 0.86%)</title><rect x="19.3353%" y="277" width="0.8560%" height="15" fill="rgb(213,199,42)" fg:x="384" fg:w="17"/><text x="19.5853%" y="287.50"></text></g><g><title>_int_free (12 samples, 0.60%)</title><rect x="19.5871%" y="261" width="0.6042%" height="15" fill="rgb(235,201,11)" fg:x="389" fg:w="12"/><text x="19.8371%" y="271.50"></text></g><g><title>tcache_put (3 samples, 0.15%)</title><rect x="20.0403%" y="245" width="0.1511%" height="15" fill="rgb(207,46,11)" fg:x="398" fg:w="3"/><text x="20.2903%" y="255.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.10%)</title><rect x="20.1913%" y="277" width="0.1007%" height="15" fill="rgb(241,35,35)" fg:x="401" fg:w="2"/><text x="20.4413%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.15%)</title><rect x="20.2920%" y="277" width="0.1511%" height="15" fill="rgb(243,32,47)" fg:x="403" fg:w="3"/><text x="20.5420%" y="287.50"></text></g><g><title>core::ptr::read (1 samples, 0.05%)</title><rect x="20.3927%" y="261" width="0.0504%" height="15" fill="rgb(247,202,23)" fg:x="405" fg:w="1"/><text x="20.6427%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.05%)</title><rect x="20.4431%" y="277" width="0.0504%" height="15" fill="rgb(219,102,11)" fg:x="406" fg:w="1"/><text x="20.6931%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="20.4431%" y="261" width="0.0504%" height="15" fill="rgb(243,110,44)" fg:x="406" fg:w="1"/><text x="20.6931%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.4431%" y="245" width="0.0504%" height="15" fill="rgb(222,74,54)" fg:x="406" fg:w="1"/><text x="20.6931%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.4431%" y="229" width="0.0504%" height="15" fill="rgb(216,99,12)" fg:x="406" fg:w="1"/><text x="20.6931%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.4431%" y="213" width="0.0504%" height="15" fill="rgb(226,22,26)" fg:x="406" fg:w="1"/><text x="20.6931%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.4431%" y="197" width="0.0504%" height="15" fill="rgb(217,163,10)" fg:x="406" fg:w="1"/><text x="20.6931%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.4431%" y="181" width="0.0504%" height="15" fill="rgb(213,25,53)" fg:x="406" fg:w="1"/><text x="20.6931%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.4431%" y="165" width="0.0504%" height="15" fill="rgb(252,105,26)" fg:x="406" fg:w="1"/><text x="20.6931%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.4431%" y="149" width="0.0504%" height="15" fill="rgb(220,39,43)" fg:x="406" fg:w="1"/><text x="20.6931%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cloned (2 samples, 0.10%)</title><rect x="20.4935%" y="277" width="0.1007%" height="15" fill="rgb(229,68,48)" fg:x="407" fg:w="2"/><text x="20.7435%" y="287.50"></text></g><g><title>core::iter::adapters::cloned::Cloned&lt;I&gt;::new (2 samples, 0.10%)</title><rect x="20.4935%" y="261" width="0.1007%" height="15" fill="rgb(252,8,32)" fg:x="407" fg:w="2"/><text x="20.7435%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.15%)</title><rect x="21.4502%" y="197" width="0.1511%" height="15" fill="rgb(223,20,43)" fg:x="426" fg:w="3"/><text x="21.7002%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="21.6516%" y="149" width="0.0504%" height="15" fill="rgb(229,81,49)" fg:x="430" fg:w="1"/><text x="21.9016%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.40%)</title><rect x="21.7019%" y="133" width="0.4028%" height="15" fill="rgb(236,28,36)" fg:x="431" fg:w="8"/><text x="21.9519%" y="143.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.05%)</title><rect x="22.0544%" y="117" width="0.0504%" height="15" fill="rgb(249,185,26)" fg:x="438" fg:w="1"/><text x="22.3044%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.05%)</title><rect x="22.0544%" y="101" width="0.0504%" height="15" fill="rgb(249,174,33)" fg:x="438" fg:w="1"/><text x="22.3044%" y="111.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (70 samples, 3.52%)</title><rect x="26.6868%" y="53" width="3.5247%" height="15" fill="rgb(233,201,37)" fg:x="530" fg:w="70"/><text x="26.9368%" y="63.50">&lt;T ..</text></g><g><title>&lt;aoc_common::position::Position as core::cmp::PartialEq&gt;::eq (70 samples, 3.52%)</title><rect x="26.6868%" y="37" width="3.5247%" height="15" fill="rgb(221,78,26)" fg:x="530" fg:w="70"/><text x="26.9368%" y="47.50">&lt;ao..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.25%)</title><rect x="30.2618%" y="37" width="0.2518%" height="15" fill="rgb(250,127,30)" fg:x="601" fg:w="5"/><text x="30.5118%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (177 samples, 8.91%)</title><rect x="21.6516%" y="165" width="8.9124%" height="15" fill="rgb(230,49,44)" fg:x="430" fg:w="177"/><text x="21.9016%" y="175.50">&lt;core::iter::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (176 samples, 8.86%)</title><rect x="21.7019%" y="149" width="8.8620%" height="15" fill="rgb(229,67,23)" fg:x="431" fg:w="176"/><text x="21.9519%" y="159.50">&lt;core::slice:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (168 samples, 8.46%)</title><rect x="22.1047%" y="133" width="8.4592%" height="15" fill="rgb(249,83,47)" fg:x="439" fg:w="168"/><text x="22.3547%" y="143.50">core::ops::f..</text></g><g><title>aoc_2023_23::find_longest_path2::_{{closure}} (168 samples, 8.46%)</title><rect x="22.1047%" y="117" width="8.4592%" height="15" fill="rgb(215,43,3)" fg:x="439" fg:w="168"/><text x="22.3547%" y="127.50">aoc_2023_23:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (168 samples, 8.46%)</title><rect x="22.1047%" y="101" width="8.4592%" height="15" fill="rgb(238,154,13)" fg:x="439" fg:w="168"/><text x="22.3547%" y="111.50">core::slice:..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (168 samples, 8.46%)</title><rect x="22.1047%" y="85" width="8.4592%" height="15" fill="rgb(219,56,2)" fg:x="439" fg:w="168"/><text x="22.3547%" y="95.50">&lt;T as core::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (168 samples, 8.46%)</title><rect x="22.1047%" y="69" width="8.4592%" height="15" fill="rgb(233,0,4)" fg:x="439" fg:w="168"/><text x="22.3547%" y="79.50">&lt;core::slice..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.35%)</title><rect x="30.2115%" y="53" width="0.3525%" height="15" fill="rgb(235,30,7)" fg:x="600" fg:w="7"/><text x="30.4615%" y="63.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.05%)</title><rect x="30.5136%" y="37" width="0.0504%" height="15" fill="rgb(250,79,13)" fg:x="606" fg:w="1"/><text x="30.7636%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (179 samples, 9.01%)</title><rect x="21.6516%" y="181" width="9.0131%" height="15" fill="rgb(211,146,34)" fg:x="430" fg:w="179"/><text x="21.9016%" y="191.50">&lt;core::iter::..</text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (2 samples, 0.10%)</title><rect x="30.5639%" y="165" width="0.1007%" height="15" fill="rgb(228,22,38)" fg:x="607" fg:w="2"/><text x="30.8139%" y="175.50"></text></g><g><title>core::clone::Clone::clone (2 samples, 0.10%)</title><rect x="30.5639%" y="149" width="0.1007%" height="15" fill="rgb(235,168,5)" fg:x="607" fg:w="2"/><text x="30.8139%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (184 samples, 9.26%)</title><rect x="21.4502%" y="213" width="9.2649%" height="15" fill="rgb(221,155,16)" fg:x="426" fg:w="184"/><text x="21.7002%" y="223.50">&lt;alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (181 samples, 9.11%)</title><rect x="21.6012%" y="197" width="9.1138%" height="15" fill="rgb(215,215,53)" fg:x="429" fg:w="181"/><text x="21.8512%" y="207.50">alloc::vec::V..</text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="30.6647%" y="181" width="0.0504%" height="15" fill="rgb(223,4,10)" fg:x="609" fg:w="1"/><text x="30.9147%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.50%)</title><rect x="30.7150%" y="181" width="0.5035%" height="15" fill="rgb(234,103,6)" fg:x="610" fg:w="10"/><text x="30.9650%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.10%)</title><rect x="31.4199%" y="149" width="0.1007%" height="15" fill="rgb(227,97,0)" fg:x="624" fg:w="2"/><text x="31.6699%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.55%)</title><rect x="31.6213%" y="133" width="0.5539%" height="15" fill="rgb(234,150,53)" fg:x="628" fg:w="11"/><text x="31.8713%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.01%)</title><rect x="31.2185%" y="165" width="1.0070%" height="15" fill="rgb(228,201,54)" fg:x="620" fg:w="20"/><text x="31.4685%" y="175.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (14 samples, 0.70%)</title><rect x="31.5206%" y="149" width="0.7049%" height="15" fill="rgb(222,22,37)" fg:x="626" fg:w="14"/><text x="31.7706%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.05%)</title><rect x="32.1752%" y="133" width="0.0504%" height="15" fill="rgb(237,53,32)" fg:x="639" fg:w="1"/><text x="32.4252%" y="143.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (160 samples, 8.06%)</title><rect x="40.0302%" y="85" width="8.0564%" height="15" fill="rgb(233,25,53)" fg:x="795" fg:w="160"/><text x="40.2802%" y="95.50">&lt;T as core:..</text></g><g><title>&lt;aoc_common::position::Position as core::cmp::PartialEq&gt;::eq (160 samples, 8.06%)</title><rect x="40.0302%" y="69" width="8.0564%" height="15" fill="rgb(210,40,34)" fg:x="795" fg:w="160"/><text x="40.2802%" y="79.50">&lt;aoc_common..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="48.1370%" y="69" width="0.0504%" height="15" fill="rgb(241,220,44)" fg:x="956" fg:w="1"/><text x="48.3870%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (353 samples, 17.77%)</title><rect x="30.7150%" y="197" width="17.7744%" height="15" fill="rgb(235,28,35)" fg:x="610" fg:w="353"/><text x="30.9650%" y="207.50">&lt;core::iter::adapters::filte..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (343 samples, 17.27%)</title><rect x="31.2185%" y="181" width="17.2709%" height="15" fill="rgb(210,56,17)" fg:x="620" fg:w="343"/><text x="31.4685%" y="191.50">&lt;core::slice::iter::Iter&lt;T&gt;..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (323 samples, 16.26%)</title><rect x="32.2256%" y="165" width="16.2638%" height="15" fill="rgb(224,130,29)" fg:x="640" fg:w="323"/><text x="32.4756%" y="175.50">core::ops::function::impl..</text></g><g><title>aoc_2023_23::find_longest_path2::_{{closure}} (323 samples, 16.26%)</title><rect x="32.2256%" y="149" width="16.2638%" height="15" fill="rgb(235,212,8)" fg:x="640" fg:w="323"/><text x="32.4756%" y="159.50">aoc_2023_23::find_longest..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (323 samples, 16.26%)</title><rect x="32.2256%" y="133" width="16.2638%" height="15" fill="rgb(223,33,50)" fg:x="640" fg:w="323"/><text x="32.4756%" y="143.50">core::slice::&lt;impl [T]&gt;::..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (323 samples, 16.26%)</title><rect x="32.2256%" y="117" width="16.2638%" height="15" fill="rgb(219,149,13)" fg:x="640" fg:w="323"/><text x="32.4756%" y="127.50">&lt;T as core::slice::cmp::S..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (323 samples, 16.26%)</title><rect x="32.2256%" y="101" width="16.2638%" height="15" fill="rgb(250,156,29)" fg:x="640" fg:w="323"/><text x="32.4756%" y="111.50">&lt;core::slice::iter::Iter&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.40%)</title><rect x="48.0866%" y="85" width="0.4028%" height="15" fill="rgb(216,193,19)" fg:x="955" fg:w="8"/><text x="48.3366%" y="95.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.30%)</title><rect x="48.1873%" y="69" width="0.3021%" height="15" fill="rgb(216,135,14)" fg:x="957" fg:w="6"/><text x="48.4373%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (358 samples, 18.03%)</title><rect x="30.7150%" y="213" width="18.0262%" height="15" fill="rgb(241,47,5)" fg:x="610" fg:w="358"/><text x="30.9650%" y="223.50">&lt;core::iter::adapters::clone..</text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (5 samples, 0.25%)</title><rect x="48.4894%" y="197" width="0.2518%" height="15" fill="rgb(233,42,35)" fg:x="963" fg:w="5"/><text x="48.7394%" y="207.50"></text></g><g><title>core::clone::Clone::clone (5 samples, 0.25%)</title><rect x="48.4894%" y="181" width="0.2518%" height="15" fill="rgb(231,13,6)" fg:x="963" fg:w="5"/><text x="48.7394%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.05%)</title><rect x="48.7412%" y="213" width="0.0504%" height="15" fill="rgb(207,181,40)" fg:x="968" fg:w="1"/><text x="48.9912%" y="223.50"></text></g><g><title>checked_request2size (5 samples, 0.25%)</title><rect x="50.0504%" y="85" width="0.2518%" height="15" fill="rgb(254,173,49)" fg:x="994" fg:w="5"/><text x="50.3004%" y="95.50"></text></g><g><title>__GI___libc_malloc (35 samples, 1.76%)</title><rect x="48.8922%" y="101" width="1.7623%" height="15" fill="rgb(221,1,38)" fg:x="971" fg:w="35"/><text x="49.1422%" y="111.50"></text></g><g><title>tcache_get (7 samples, 0.35%)</title><rect x="50.3021%" y="85" width="0.3525%" height="15" fill="rgb(206,124,46)" fg:x="999" fg:w="7"/><text x="50.5521%" y="95.50"></text></g><g><title>__rdl_alloc (4 samples, 0.20%)</title><rect x="50.6546%" y="101" width="0.2014%" height="15" fill="rgb(249,21,11)" fg:x="1006" fg:w="4"/><text x="50.9046%" y="111.50"></text></g><g><title>__rust_alloc (1 samples, 0.05%)</title><rect x="50.8560%" y="101" width="0.0504%" height="15" fill="rgb(222,201,40)" fg:x="1010" fg:w="1"/><text x="51.1060%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (43 samples, 2.17%)</title><rect x="48.7915%" y="213" width="2.1652%" height="15" fill="rgb(235,61,29)" fg:x="969" fg:w="43"/><text x="49.0415%" y="223.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 2.17%)</title><rect x="48.7915%" y="197" width="2.1652%" height="15" fill="rgb(219,207,3)" fg:x="969" fg:w="43"/><text x="49.0415%" y="207.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43 samples, 2.17%)</title><rect x="48.7915%" y="181" width="2.1652%" height="15" fill="rgb(222,56,46)" fg:x="969" fg:w="43"/><text x="49.0415%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 2.17%)</title><rect x="48.7915%" y="165" width="2.1652%" height="15" fill="rgb(239,76,54)" fg:x="969" fg:w="43"/><text x="49.0415%" y="175.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 2.17%)</title><rect x="48.7915%" y="149" width="2.1652%" height="15" fill="rgb(231,124,27)" fg:x="969" fg:w="43"/><text x="49.0415%" y="159.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 2.17%)</title><rect x="48.7915%" y="133" width="2.1652%" height="15" fill="rgb(249,195,6)" fg:x="969" fg:w="43"/><text x="49.0415%" y="143.50">a..</text></g><g><title>alloc::alloc::alloc (43 samples, 2.17%)</title><rect x="48.7915%" y="117" width="2.1652%" height="15" fill="rgb(237,174,47)" fg:x="969" fg:w="43"/><text x="49.0415%" y="127.50">a..</text></g><g><title>core::ptr::read_volatile (1 samples, 0.05%)</title><rect x="50.9063%" y="101" width="0.0504%" height="15" fill="rgb(206,201,31)" fg:x="1011" fg:w="1"/><text x="51.1563%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (606 samples, 30.51%)</title><rect x="20.5942%" y="277" width="30.5136%" height="15" fill="rgb(231,57,52)" fg:x="409" fg:w="606"/><text x="20.8442%" y="287.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (606 samples, 30.51%)</title><rect x="20.5942%" y="261" width="30.5136%" height="15" fill="rgb(248,177,22)" fg:x="409" fg:w="606"/><text x="20.8442%" y="271.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (602 samples, 30.31%)</title><rect x="20.7956%" y="245" width="30.3122%" height="15" fill="rgb(215,211,37)" fg:x="413" fg:w="602"/><text x="21.0456%" y="255.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (598 samples, 30.11%)</title><rect x="20.9970%" y="229" width="30.1108%" height="15" fill="rgb(241,128,51)" fg:x="417" fg:w="598"/><text x="21.2470%" y="239.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter..</text></g><g><title>core::ptr::write (3 samples, 0.15%)</title><rect x="50.9567%" y="213" width="0.1511%" height="15" fill="rgb(227,165,31)" fg:x="1012" fg:w="3"/><text x="51.2067%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.10%)</title><rect x="51.1078%" y="245" width="0.1007%" height="15" fill="rgb(228,167,24)" fg:x="1015" fg:w="2"/><text x="51.3578%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.10%)</title><rect x="51.2085%" y="197" width="0.1007%" height="15" fill="rgb(228,143,12)" fg:x="1017" fg:w="2"/><text x="51.4585%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.10%)</title><rect x="51.2085%" y="181" width="0.1007%" height="15" fill="rgb(249,149,8)" fg:x="1017" fg:w="2"/><text x="51.4585%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.10%)</title><rect x="51.2085%" y="165" width="0.1007%" height="15" fill="rgb(243,35,44)" fg:x="1017" fg:w="2"/><text x="51.4585%" y="175.50"></text></g><g><title>checked_request2size (10 samples, 0.50%)</title><rect x="52.7190%" y="37" width="0.5035%" height="15" fill="rgb(246,89,9)" fg:x="1047" fg:w="10"/><text x="52.9690%" y="47.50"></text></g><g><title>__GI___libc_malloc (44 samples, 2.22%)</title><rect x="51.7623%" y="53" width="2.2155%" height="15" fill="rgb(233,213,13)" fg:x="1028" fg:w="44"/><text x="52.0123%" y="63.50">_..</text></g><g><title>tcache_get (15 samples, 0.76%)</title><rect x="53.2226%" y="37" width="0.7553%" height="15" fill="rgb(233,141,41)" fg:x="1057" fg:w="15"/><text x="53.4726%" y="47.50"></text></g><g><title>__rdl_alloc (12 samples, 0.60%)</title><rect x="53.9778%" y="53" width="0.6042%" height="15" fill="rgb(239,167,4)" fg:x="1072" fg:w="12"/><text x="54.2278%" y="63.50"></text></g><g><title>__rust_alloc (4 samples, 0.20%)</title><rect x="54.5821%" y="53" width="0.2014%" height="15" fill="rgb(209,217,16)" fg:x="1084" fg:w="4"/><text x="54.8321%" y="63.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 3.58%)</title><rect x="51.6113%" y="101" width="3.5750%" height="15" fill="rgb(219,88,35)" fg:x="1025" fg:w="71"/><text x="51.8613%" y="111.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 3.58%)</title><rect x="51.6113%" y="85" width="3.5750%" height="15" fill="rgb(220,193,23)" fg:x="1025" fg:w="71"/><text x="51.8613%" y="95.50">allo..</text></g><g><title>alloc::alloc::alloc (71 samples, 3.58%)</title><rect x="51.6113%" y="69" width="3.5750%" height="15" fill="rgb(230,90,52)" fg:x="1025" fg:w="71"/><text x="51.8613%" y="79.50">allo..</text></g><g><title>core::ptr::read_volatile (8 samples, 0.40%)</title><rect x="54.7835%" y="53" width="0.4028%" height="15" fill="rgb(252,106,19)" fg:x="1088" fg:w="8"/><text x="55.0335%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (78 samples, 3.93%)</title><rect x="51.3092%" y="149" width="3.9275%" height="15" fill="rgb(206,74,20)" fg:x="1019" fg:w="78"/><text x="51.5592%" y="159.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (78 samples, 3.93%)</title><rect x="51.3092%" y="133" width="3.9275%" height="15" fill="rgb(230,138,44)" fg:x="1019" fg:w="78"/><text x="51.5592%" y="143.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (78 samples, 3.93%)</title><rect x="51.3092%" y="117" width="3.9275%" height="15" fill="rgb(235,182,43)" fg:x="1019" fg:w="78"/><text x="51.5592%" y="127.50">allo..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.05%)</title><rect x="55.1863%" y="101" width="0.0504%" height="15" fill="rgb(242,16,51)" fg:x="1096" fg:w="1"/><text x="55.4363%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.05%)</title><rect x="55.1863%" y="85" width="0.0504%" height="15" fill="rgb(248,9,4)" fg:x="1096" fg:w="1"/><text x="55.4363%" y="95.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (122 samples, 6.14%)</title><rect x="51.3092%" y="165" width="6.1430%" height="15" fill="rgb(210,31,22)" fg:x="1019" fg:w="122"/><text x="51.5592%" y="175.50">&lt;T as al..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (44 samples, 2.22%)</title><rect x="55.2367%" y="149" width="2.2155%" height="15" fill="rgb(239,54,39)" fg:x="1097" fg:w="44"/><text x="55.4867%" y="159.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 2.22%)</title><rect x="55.2367%" y="133" width="2.2155%" height="15" fill="rgb(230,99,41)" fg:x="1097" fg:w="44"/><text x="55.4867%" y="143.50">c..</text></g><g><title>__memcpy_avx_unaligned_erms (43 samples, 2.17%)</title><rect x="55.2870%" y="117" width="2.1652%" height="15" fill="rgb(253,106,12)" fg:x="1098" fg:w="43"/><text x="55.5370%" y="127.50">_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (126 samples, 6.34%)</title><rect x="51.2085%" y="213" width="6.3444%" height="15" fill="rgb(213,46,41)" fg:x="1017" fg:w="126"/><text x="51.4585%" y="223.50">&lt;alloc::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (124 samples, 6.24%)</title><rect x="51.3092%" y="197" width="6.2437%" height="15" fill="rgb(215,133,35)" fg:x="1019" fg:w="124"/><text x="51.5592%" y="207.50">alloc::s..</text></g><g><title>alloc::slice::hack::to_vec (124 samples, 6.24%)</title><rect x="51.3092%" y="181" width="6.2437%" height="15" fill="rgb(213,28,5)" fg:x="1019" fg:w="124"/><text x="51.5592%" y="191.50">alloc::s..</text></g><g><title>aoc_2023_23::find_longest_path2 (2 samples, 0.10%)</title><rect x="57.4522%" y="165" width="0.1007%" height="15" fill="rgb(215,77,49)" fg:x="1141" fg:w="2"/><text x="57.7022%" y="175.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h3daff55f9f2e4af7E.llvm.17999034015192174827 (1 samples, 0.05%)</title><rect x="58.0060%" y="165" width="0.0504%" height="15" fill="rgb(248,100,22)" fg:x="1152" fg:w="1"/><text x="58.2560%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (15 samples, 0.76%)</title><rect x="58.0564%" y="165" width="0.7553%" height="15" fill="rgb(208,67,9)" fg:x="1153" fg:w="15"/><text x="58.3064%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.45%)</title><rect x="61.8832%" y="69" width="0.4532%" height="15" fill="rgb(219,133,21)" fg:x="1229" fg:w="9"/><text x="62.1332%" y="79.50"></text></g><g><title>_int_free (23 samples, 1.16%)</title><rect x="62.3364%" y="69" width="1.1581%" height="15" fill="rgb(246,46,29)" fg:x="1238" fg:w="23"/><text x="62.5864%" y="79.50"></text></g><g><title>alloc_perturb (1 samples, 0.05%)</title><rect x="75.4783%" y="53" width="0.0504%" height="15" fill="rgb(246,185,52)" fg:x="1499" fg:w="1"/><text x="75.7283%" y="63.50"></text></g><g><title>checked_request2size (6 samples, 0.30%)</title><rect x="75.5287%" y="53" width="0.3021%" height="15" fill="rgb(252,136,11)" fg:x="1500" fg:w="6"/><text x="75.7787%" y="63.50"></text></g><g><title>tcache_put (8 samples, 0.40%)</title><rect x="75.8308%" y="53" width="0.4028%" height="15" fill="rgb(219,138,53)" fg:x="1506" fg:w="8"/><text x="76.0808%" y="63.50"></text></g><g><title>_int_malloc (265 samples, 13.34%)</title><rect x="63.4945%" y="69" width="13.3434%" height="15" fill="rgb(211,51,23)" fg:x="1261" fg:w="265"/><text x="63.7445%" y="79.50">_int_malloc</text></g><g><title>unlink_chunk (12 samples, 0.60%)</title><rect x="76.2336%" y="53" width="0.6042%" height="15" fill="rgb(247,221,28)" fg:x="1514" fg:w="12"/><text x="76.4836%" y="63.50"></text></g><g><title>_int_realloc (327 samples, 16.47%)</title><rect x="60.5740%" y="85" width="16.4653%" height="15" fill="rgb(251,222,45)" fg:x="1203" fg:w="327"/><text x="60.8240%" y="95.50">_int_realloc</text></g><g><title>memcpy@@GLIBC_2.14@plt (4 samples, 0.20%)</title><rect x="76.8379%" y="69" width="0.2014%" height="15" fill="rgb(217,162,53)" fg:x="1526" fg:w="4"/><text x="77.0879%" y="79.50"></text></g><g><title>arena_for_chunk (1 samples, 0.05%)</title><rect x="77.0393%" y="85" width="0.0504%" height="15" fill="rgb(229,93,14)" fg:x="1530" fg:w="1"/><text x="77.2893%" y="95.50"></text></g><g><title>__GI___libc_realloc (356 samples, 17.93%)</title><rect x="59.2649%" y="101" width="17.9255%" height="15" fill="rgb(209,67,49)" fg:x="1177" fg:w="356"/><text x="59.5149%" y="111.50">__GI___libc_realloc</text></g><g><title>checked_request2size (2 samples, 0.10%)</title><rect x="77.0896%" y="85" width="0.1007%" height="15" fill="rgb(213,87,29)" fg:x="1531" fg:w="2"/><text x="77.3396%" y="95.50"></text></g><g><title>__rdl_realloc (9 samples, 0.45%)</title><rect x="77.1903%" y="101" width="0.4532%" height="15" fill="rgb(205,151,52)" fg:x="1533" fg:w="9"/><text x="77.4403%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (368 samples, 18.53%)</title><rect x="59.2649%" y="149" width="18.5297%" height="15" fill="rgb(253,215,39)" fg:x="1177" fg:w="368"/><text x="59.5149%" y="159.50">&lt;alloc::alloc::Global as core..</text></g><g><title>alloc::alloc::Global::grow_impl (368 samples, 18.53%)</title><rect x="59.2649%" y="133" width="18.5297%" height="15" fill="rgb(221,220,41)" fg:x="1177" fg:w="368"/><text x="59.5149%" y="143.50">alloc::alloc::Global::grow_im..</text></g><g><title>alloc::alloc::realloc (368 samples, 18.53%)</title><rect x="59.2649%" y="117" width="18.5297%" height="15" fill="rgb(218,133,21)" fg:x="1177" fg:w="368"/><text x="59.5149%" y="127.50">alloc::alloc::realloc</text></g><g><title>__rust_realloc (3 samples, 0.15%)</title><rect x="77.6435%" y="101" width="0.1511%" height="15" fill="rgb(221,193,43)" fg:x="1542" fg:w="3"/><text x="77.8935%" y="111.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h3daff55f9f2e4af7E.llvm.17999034015192174827 (4 samples, 0.20%)</title><rect x="77.7946%" y="149" width="0.2014%" height="15" fill="rgb(240,128,52)" fg:x="1545" fg:w="4"/><text x="78.0446%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (383 samples, 19.28%)</title><rect x="58.8117%" y="165" width="19.2850%" height="15" fill="rgb(253,114,12)" fg:x="1168" fg:w="383"/><text x="59.0617%" y="175.50">alloc::raw_vec::finish_grow</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.10%)</title><rect x="77.9960%" y="149" width="0.1007%" height="15" fill="rgb(215,223,47)" fg:x="1549" fg:w="2"/><text x="78.2460%" y="159.50"></text></g><g><title>core::cmp::max (4 samples, 0.20%)</title><rect x="78.0967%" y="165" width="0.2014%" height="15" fill="rgb(248,225,23)" fg:x="1551" fg:w="4"/><text x="78.3467%" y="175.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.20%)</title><rect x="78.0967%" y="149" width="0.2014%" height="15" fill="rgb(250,108,0)" fg:x="1551" fg:w="4"/><text x="78.3467%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.20%)</title><rect x="78.0967%" y="133" width="0.2014%" height="15" fill="rgb(228,208,7)" fg:x="1551" fg:w="4"/><text x="78.3467%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (408 samples, 20.54%)</title><rect x="57.8550%" y="197" width="20.5438%" height="15" fill="rgb(244,45,10)" fg:x="1149" fg:w="408"/><text x="58.1050%" y="207.50">alloc::raw_vec::RawVec&lt;T,A&gt;::res..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (408 samples, 20.54%)</title><rect x="57.8550%" y="181" width="20.5438%" height="15" fill="rgb(207,125,25)" fg:x="1149" fg:w="408"/><text x="58.1050%" y="191.50">alloc::raw_vec::RawVec&lt;T,A&gt;::gro..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.10%)</title><rect x="78.2981%" y="165" width="0.1007%" height="15" fill="rgb(210,195,18)" fg:x="1555" fg:w="2"/><text x="78.5481%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.10%)</title><rect x="78.2981%" y="149" width="0.1007%" height="15" fill="rgb(249,80,12)" fg:x="1555" fg:w="2"/><text x="78.5481%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.10%)</title><rect x="78.3988%" y="197" width="0.1007%" height="15" fill="rgb(221,65,9)" fg:x="1557" fg:w="2"/><text x="78.6488%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (422 samples, 21.25%)</title><rect x="57.5529%" y="213" width="21.2487%" height="15" fill="rgb(235,49,36)" fg:x="1143" fg:w="422"/><text x="57.8029%" y="223.50">alloc::vec::Vec&lt;T,A&gt;::push</text></g><g><title>core::ptr::write (6 samples, 0.30%)</title><rect x="78.4995%" y="197" width="0.3021%" height="15" fill="rgb(225,32,20)" fg:x="1559" fg:w="6"/><text x="78.7495%" y="207.50"></text></g><g><title>free_perturb (1 samples, 0.05%)</title><rect x="83.4844%" y="101" width="0.0504%" height="15" fill="rgb(215,141,46)" fg:x="1658" fg:w="1"/><text x="83.7344%" y="111.50"></text></g><g><title>_int_free (90 samples, 4.53%)</title><rect x="79.3051%" y="117" width="4.5317%" height="15" fill="rgb(250,160,47)" fg:x="1575" fg:w="90"/><text x="79.5551%" y="127.50">_int_..</text></g><g><title>unlink_chunk (6 samples, 0.30%)</title><rect x="83.5347%" y="101" width="0.3021%" height="15" fill="rgb(216,222,40)" fg:x="1659" fg:w="6"/><text x="83.7847%" y="111.50"></text></g><g><title>__GI___libc_free (102 samples, 5.14%)</title><rect x="78.8016%" y="133" width="5.1360%" height="15" fill="rgb(234,217,39)" fg:x="1565" fg:w="102"/><text x="79.0516%" y="143.50">__GI__..</text></g><g><title>arena_for_chunk (2 samples, 0.10%)</title><rect x="83.8369%" y="117" width="0.1007%" height="15" fill="rgb(207,178,40)" fg:x="1665" fg:w="2"/><text x="84.0869%" y="127.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.40%)</title><rect x="83.9376%" y="133" width="0.4028%" height="15" fill="rgb(221,136,13)" fg:x="1667" fg:w="8"/><text x="84.1876%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (111 samples, 5.59%)</title><rect x="78.8016%" y="149" width="5.5891%" height="15" fill="rgb(249,199,10)" fg:x="1565" fg:w="111"/><text x="79.0516%" y="159.50">alloc::..</text></g><g><title>__rust_dealloc (1 samples, 0.05%)</title><rect x="84.3404%" y="133" width="0.0504%" height="15" fill="rgb(249,222,13)" fg:x="1675" fg:w="1"/><text x="84.5904%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (112 samples, 5.64%)</title><rect x="78.8016%" y="165" width="5.6395%" height="15" fill="rgb(244,185,38)" fg:x="1565" fg:w="112"/><text x="79.0516%" y="175.50">&lt;alloc:..</text></g><g><title>aoc_2023_23::find_longest_path2 (1 samples, 0.05%)</title><rect x="84.3907%" y="149" width="0.0504%" height="15" fill="rgb(236,202,9)" fg:x="1676" fg:w="1"/><text x="84.6407%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (666 samples, 33.53%)</title><rect x="51.1078%" y="277" width="33.5347%" height="15" fill="rgb(250,229,37)" fg:x="1015" fg:w="666"/><text x="51.3578%" y="287.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (666 samples, 33.53%)</title><rect x="51.1078%" y="261" width="33.5347%" height="15" fill="rgb(206,174,23)" fg:x="1015" fg:w="666"/><text x="51.3578%" y="271.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (664 samples, 33.43%)</title><rect x="51.2085%" y="245" width="33.4340%" height="15" fill="rgb(211,33,43)" fg:x="1017" fg:w="664"/><text x="51.4585%" y="255.50">core::iter::traits::iterator::Iterator::for_each::call..</text></g><g><title>aoc_2023_23::find_longest_path2::_{{closure}} (664 samples, 33.43%)</title><rect x="51.2085%" y="229" width="33.4340%" height="15" fill="rgb(245,58,50)" fg:x="1017" fg:w="664"/><text x="51.4585%" y="239.50">aoc_2023_23::find_longest_path2::_{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;aoc_common::position::Position&gt;&gt; (116 samples, 5.84%)</title><rect x="78.8016%" y="213" width="5.8409%" height="15" fill="rgb(244,68,36)" fg:x="1565" fg:w="116"/><text x="79.0516%" y="223.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;aoc_common::position::Position&gt;&gt; (116 samples, 5.84%)</title><rect x="78.8016%" y="197" width="5.8409%" height="15" fill="rgb(232,229,15)" fg:x="1565" fg:w="116"/><text x="79.0516%" y="207.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (116 samples, 5.84%)</title><rect x="78.8016%" y="181" width="5.8409%" height="15" fill="rgb(254,30,23)" fg:x="1565" fg:w="116"/><text x="79.0516%" y="191.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.20%)</title><rect x="84.4411%" y="165" width="0.2014%" height="15" fill="rgb(235,160,14)" fg:x="1677" fg:w="4"/><text x="84.6911%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.15%)</title><rect x="84.6425%" y="245" width="0.1511%" height="15" fill="rgb(212,155,44)" fg:x="1681" fg:w="3"/><text x="84.8925%" y="255.50"></text></g><g><title>_int_free (28 samples, 1.41%)</title><rect x="85.0453%" y="101" width="1.4099%" height="15" fill="rgb(226,2,50)" fg:x="1689" fg:w="28"/><text x="85.2953%" y="111.50"></text></g><g><title>tcache_put (4 samples, 0.20%)</title><rect x="86.2538%" y="85" width="0.2014%" height="15" fill="rgb(234,177,6)" fg:x="1713" fg:w="4"/><text x="86.5038%" y="95.50"></text></g><g><title>__GI___libc_free (34 samples, 1.71%)</title><rect x="84.8439%" y="117" width="1.7120%" height="15" fill="rgb(217,24,9)" fg:x="1685" fg:w="34"/><text x="85.0939%" y="127.50"></text></g><g><title>arena_for_chunk (2 samples, 0.10%)</title><rect x="86.4552%" y="101" width="0.1007%" height="15" fill="rgb(220,13,46)" fg:x="1717" fg:w="2"/><text x="86.7052%" y="111.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.15%)</title><rect x="86.5559%" y="117" width="0.1511%" height="15" fill="rgb(239,221,27)" fg:x="1719" fg:w="3"/><text x="86.8059%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::last (42 samples, 2.11%)</title><rect x="84.6425%" y="277" width="2.1148%" height="15" fill="rgb(222,198,25)" fg:x="1681" fg:w="42"/><text x="84.8925%" y="287.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (42 samples, 2.11%)</title><rect x="84.6425%" y="261" width="2.1148%" height="15" fill="rgb(211,99,13)" fg:x="1681" fg:w="42"/><text x="84.8925%" y="271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;aoc_common::position::Position&gt;&gt; (39 samples, 1.96%)</title><rect x="84.7936%" y="245" width="1.9637%" height="15" fill="rgb(232,111,31)" fg:x="1684" fg:w="39"/><text x="85.0436%" y="255.50">c..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 1.96%)</title><rect x="84.7936%" y="229" width="1.9637%" height="15" fill="rgb(245,82,37)" fg:x="1684" fg:w="39"/><text x="85.0436%" y="239.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;aoc_common::position::Position,alloc::alloc::Global&gt;&gt; (39 samples, 1.96%)</title><rect x="84.7936%" y="213" width="1.9637%" height="15" fill="rgb(227,149,46)" fg:x="1684" fg:w="39"/><text x="85.0436%" y="223.50">c..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 1.96%)</title><rect x="84.7936%" y="197" width="1.9637%" height="15" fill="rgb(218,36,50)" fg:x="1684" fg:w="39"/><text x="85.0436%" y="207.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;aoc_common::position::Position&gt;&gt; (39 samples, 1.96%)</title><rect x="84.7936%" y="181" width="1.9637%" height="15" fill="rgb(226,80,48)" fg:x="1684" fg:w="39"/><text x="85.0436%" y="191.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 1.96%)</title><rect x="84.7936%" y="165" width="1.9637%" height="15" fill="rgb(238,224,15)" fg:x="1684" fg:w="39"/><text x="85.0436%" y="175.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 1.96%)</title><rect x="84.7936%" y="149" width="1.9637%" height="15" fill="rgb(241,136,10)" fg:x="1684" fg:w="39"/><text x="85.0436%" y="159.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (39 samples, 1.96%)</title><rect x="84.7936%" y="133" width="1.9637%" height="15" fill="rgb(208,32,45)" fg:x="1684" fg:w="39"/><text x="85.0436%" y="143.50">a..</text></g><g><title>__rust_dealloc (1 samples, 0.05%)</title><rect x="86.7069%" y="117" width="0.0504%" height="15" fill="rgb(207,135,9)" fg:x="1722" fg:w="1"/><text x="86.9569%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max (1 samples, 0.05%)</title><rect x="86.7573%" y="277" width="0.0504%" height="15" fill="rgb(206,86,44)" fg:x="1723" fg:w="1"/><text x="87.0073%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (1 samples, 0.05%)</title><rect x="86.7573%" y="261" width="0.0504%" height="15" fill="rgb(245,177,15)" fg:x="1723" fg:w="1"/><text x="87.0073%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1 samples, 0.05%)</title><rect x="86.7573%" y="245" width="0.0504%" height="15" fill="rgb(206,64,50)" fg:x="1723" fg:w="1"/><text x="87.0073%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.05%)</title><rect x="86.7573%" y="229" width="0.0504%" height="15" fill="rgb(234,36,40)" fg:x="1723" fg:w="1"/><text x="87.0073%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (1 samples, 0.05%)</title><rect x="86.7573%" y="213" width="0.0504%" height="15" fill="rgb(213,64,8)" fg:x="1723" fg:w="1"/><text x="87.0073%" y="223.50"></text></g><g><title>aoc_2023_23::find_longest_path2 (1 samples, 0.05%)</title><rect x="86.7573%" y="197" width="0.0504%" height="15" fill="rgb(210,75,36)" fg:x="1723" fg:w="1"/><text x="87.0073%" y="207.50"></text></g><g><title>_int_free (30 samples, 1.51%)</title><rect x="87.2608%" y="181" width="1.5106%" height="15" fill="rgb(229,88,21)" fg:x="1733" fg:w="30"/><text x="87.5108%" y="191.50"></text></g><g><title>tcache_put (3 samples, 0.15%)</title><rect x="88.6203%" y="165" width="0.1511%" height="15" fill="rgb(252,204,47)" fg:x="1760" fg:w="3"/><text x="88.8703%" y="175.50"></text></g><g><title>__GI___libc_free (41 samples, 2.06%)</title><rect x="86.8077%" y="197" width="2.0645%" height="15" fill="rgb(208,77,27)" fg:x="1724" fg:w="41"/><text x="87.0577%" y="207.50">_..</text></g><g><title>arena_for_chunk (2 samples, 0.10%)</title><rect x="88.7714%" y="181" width="0.1007%" height="15" fill="rgb(221,76,26)" fg:x="1763" fg:w="2"/><text x="89.0214%" y="191.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.15%)</title><rect x="88.8721%" y="197" width="0.1511%" height="15" fill="rgb(225,139,18)" fg:x="1765" fg:w="3"/><text x="89.1221%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (50 samples, 2.52%)</title><rect x="86.8077%" y="213" width="2.5176%" height="15" fill="rgb(230,137,11)" fg:x="1724" fg:w="50"/><text x="87.0577%" y="223.50">al..</text></g><g><title>__rust_dealloc (6 samples, 0.30%)</title><rect x="89.0232%" y="197" width="0.3021%" height="15" fill="rgb(212,28,1)" fg:x="1768" fg:w="6"/><text x="89.2732%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (53 samples, 2.67%)</title><rect x="86.8077%" y="229" width="2.6687%" height="15" fill="rgb(248,164,17)" fg:x="1724" fg:w="53"/><text x="87.0577%" y="239.50">&lt;a..</text></g><g><title>aoc_2023_23::find_longest_path2 (3 samples, 0.15%)</title><rect x="89.3253%" y="213" width="0.1511%" height="15" fill="rgb(222,171,42)" fg:x="1774" fg:w="3"/><text x="89.5753%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;aoc_common::position::Position&gt;&gt; (55 samples, 2.77%)</title><rect x="86.8077%" y="277" width="2.7694%" height="15" fill="rgb(243,84,45)" fg:x="1724" fg:w="55"/><text x="87.0577%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;aoc_common::position::Position&gt;&gt; (55 samples, 2.77%)</title><rect x="86.8077%" y="261" width="2.7694%" height="15" fill="rgb(252,49,23)" fg:x="1724" fg:w="55"/><text x="87.0577%" y="271.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 2.77%)</title><rect x="86.8077%" y="245" width="2.7694%" height="15" fill="rgb(215,19,7)" fg:x="1724" fg:w="55"/><text x="87.0577%" y="255.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.10%)</title><rect x="89.4763%" y="229" width="0.1007%" height="15" fill="rgb(238,81,41)" fg:x="1777" fg:w="2"/><text x="89.7263%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (2 samples, 0.10%)</title><rect x="89.4763%" y="213" width="0.1007%" height="15" fill="rgb(210,199,37)" fg:x="1777" fg:w="2"/><text x="89.7263%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.35%)</title><rect x="90.6848%" y="133" width="0.3525%" height="15" fill="rgb(244,192,49)" fg:x="1801" fg:w="7"/><text x="90.9348%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17 samples, 0.86%)</title><rect x="90.3827%" y="149" width="0.8560%" height="15" fill="rgb(226,211,11)" fg:x="1795" fg:w="17"/><text x="90.6327%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.20%)</title><rect x="91.0373%" y="133" width="0.2014%" height="15" fill="rgb(236,162,54)" fg:x="1808" fg:w="4"/><text x="91.2873%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.55%)</title><rect x="91.4904%" y="133" width="0.5539%" height="15" fill="rgb(220,229,9)" fg:x="1817" fg:w="11"/><text x="91.7404%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (57 samples, 2.87%)</title><rect x="89.8792%" y="197" width="2.8701%" height="15" fill="rgb(250,87,22)" fg:x="1785" fg:w="57"/><text x="90.1292%" y="207.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (57 samples, 2.87%)</title><rect x="89.8792%" y="181" width="2.8701%" height="15" fill="rgb(239,43,17)" fg:x="1785" fg:w="57"/><text x="90.1292%" y="191.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (57 samples, 2.87%)</title><rect x="89.8792%" y="165" width="2.8701%" height="15" fill="rgb(231,177,25)" fg:x="1785" fg:w="57"/><text x="90.1292%" y="175.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (30 samples, 1.51%)</title><rect x="91.2387%" y="149" width="1.5106%" height="15" fill="rgb(219,179,1)" fg:x="1812" fg:w="30"/><text x="91.4887%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14 samples, 0.70%)</title><rect x="92.0443%" y="133" width="0.7049%" height="15" fill="rgb(238,219,53)" fg:x="1828" fg:w="14"/><text x="92.2943%" y="143.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.10%)</title><rect x="92.7492%" y="197" width="0.1007%" height="15" fill="rgb(232,167,36)" fg:x="1842" fg:w="2"/><text x="92.9992%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.05%)</title><rect x="92.7996%" y="181" width="0.0504%" height="15" fill="rgb(244,19,51)" fg:x="1843" fg:w="1"/><text x="93.0496%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.05%)</title><rect x="92.7996%" y="165" width="0.0504%" height="15" fill="rgb(224,6,22)" fg:x="1843" fg:w="1"/><text x="93.0496%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="92.7996%" y="149" width="0.0504%" height="15" fill="rgb(224,145,5)" fg:x="1843" fg:w="1"/><text x="93.0496%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.25%)</title><rect x="94.9648%" y="53" width="0.2518%" height="15" fill="rgb(234,130,49)" fg:x="1886" fg:w="5"/><text x="95.2148%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.60%)</title><rect x="94.8640%" y="69" width="0.6042%" height="15" fill="rgb(254,6,2)" fg:x="1884" fg:w="12"/><text x="95.1140%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.25%)</title><rect x="95.2165%" y="53" width="0.2518%" height="15" fill="rgb(208,96,46)" fg:x="1891" fg:w="5"/><text x="95.4665%" y="63.50"></text></g><g><title>_ZN71_$LT$std..hash..random..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h0f59cb3d3b17ac2bE.llvm.3155641980379484043 (5 samples, 0.25%)</title><rect x="95.4683%" y="69" width="0.2518%" height="15" fill="rgb(239,3,39)" fg:x="1896" fg:w="5"/><text x="95.7183%" y="79.50"></text></g><g><title>core::cmp::min (1 samples, 0.05%)</title><rect x="95.7200%" y="69" width="0.0504%" height="15" fill="rgb(233,210,1)" fg:x="1901" fg:w="1"/><text x="95.9700%" y="79.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.05%)</title><rect x="95.7200%" y="53" width="0.0504%" height="15" fill="rgb(244,137,37)" fg:x="1901" fg:w="1"/><text x="95.9700%" y="63.50"></text></g><g><title>_ZN71_$LT$std..hash..random..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h0f59cb3d3b17ac2bE.llvm.3155641980379484043 (1 samples, 0.05%)</title><rect x="95.7200%" y="37" width="0.0504%" height="15" fill="rgb(240,136,2)" fg:x="1901" fg:w="1"/><text x="95.9700%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (81 samples, 4.08%)</title><rect x="93.4542%" y="85" width="4.0785%" height="15" fill="rgb(239,18,37)" fg:x="1856" fg:w="81"/><text x="93.7042%" y="95.50">&lt;cor..</text></g><g><title>core::hash::sip::u8to64_le (35 samples, 1.76%)</title><rect x="95.7704%" y="69" width="1.7623%" height="15" fill="rgb(218,185,22)" fg:x="1902" fg:w="35"/><text x="96.0204%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.10%)</title><rect x="97.4320%" y="53" width="0.1007%" height="15" fill="rgb(225,218,4)" fg:x="1935" fg:w="2"/><text x="97.6820%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (168 samples, 8.46%)</title><rect x="89.5770%" y="229" width="8.4592%" height="15" fill="rgb(230,182,32)" fg:x="1779" fg:w="168"/><text x="89.8270%" y="239.50">hashbrown::m..</text></g><g><title>core::hash::BuildHasher::hash_one (167 samples, 8.41%)</title><rect x="89.6274%" y="213" width="8.4089%" height="15" fill="rgb(242,56,43)" fg:x="1780" fg:w="167"/><text x="89.8774%" y="223.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (103 samples, 5.19%)</title><rect x="92.8499%" y="197" width="5.1863%" height="15" fill="rgb(233,99,24)" fg:x="1844" fg:w="103"/><text x="93.0999%" y="207.50">core::..</text></g><g><title>&lt;aoc_common::position::Position as core::hash::Hash&gt;::hash (97 samples, 4.88%)</title><rect x="93.1521%" y="181" width="4.8842%" height="15" fill="rgb(234,209,42)" fg:x="1850" fg:w="97"/><text x="93.4021%" y="191.50">&lt;aoc_c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (97 samples, 4.88%)</title><rect x="93.1521%" y="165" width="4.8842%" height="15" fill="rgb(227,7,12)" fg:x="1850" fg:w="97"/><text x="93.4021%" y="175.50">core::..</text></g><g><title>core::hash::Hasher::write_i32 (97 samples, 4.88%)</title><rect x="93.1521%" y="149" width="4.8842%" height="15" fill="rgb(245,203,43)" fg:x="1850" fg:w="97"/><text x="93.4021%" y="159.50">core::..</text></g><g><title>core::hash::Hasher::write_u32 (97 samples, 4.88%)</title><rect x="93.1521%" y="133" width="4.8842%" height="15" fill="rgb(238,205,33)" fg:x="1850" fg:w="97"/><text x="93.4021%" y="143.50">core::..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (91 samples, 4.58%)</title><rect x="93.4542%" y="117" width="4.5821%" height="15" fill="rgb(231,56,7)" fg:x="1856" fg:w="91"/><text x="93.7042%" y="127.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (91 samples, 4.58%)</title><rect x="93.4542%" y="101" width="4.5821%" height="15" fill="rgb(244,186,29)" fg:x="1856" fg:w="91"/><text x="93.7042%" y="111.50">&lt;core..</text></g><g><title>_ZN71_$LT$std..hash..random..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h0f59cb3d3b17ac2bE.llvm.3155641980379484043 (10 samples, 0.50%)</title><rect x="97.5327%" y="85" width="0.5035%" height="15" fill="rgb(234,111,31)" fg:x="1937" fg:w="10"/><text x="97.7827%" y="95.50"></text></g><g><title>aoc_2023_23::find_longest_path2 (2 samples, 0.10%)</title><rect x="98.0363%" y="197" width="0.1007%" height="15" fill="rgb(241,149,10)" fg:x="1947" fg:w="2"/><text x="98.2863%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.25%)</title><rect x="98.8922%" y="181" width="0.2518%" height="15" fill="rgb(249,206,44)" fg:x="1964" fg:w="5"/><text x="99.1422%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (5 samples, 0.25%)</title><rect x="98.8922%" y="165" width="0.2518%" height="15" fill="rgb(251,153,30)" fg:x="1964" fg:w="5"/><text x="99.1422%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.15%)</title><rect x="99.1440%" y="181" width="0.1511%" height="15" fill="rgb(239,152,38)" fg:x="1969" fg:w="3"/><text x="99.3940%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (3 samples, 0.15%)</title><rect x="99.1440%" y="165" width="0.1511%" height="15" fill="rgb(249,139,47)" fg:x="1969" fg:w="3"/><text x="99.3940%" y="175.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.15%)</title><rect x="99.1440%" y="149" width="0.1511%" height="15" fill="rgb(244,64,35)" fg:x="1969" fg:w="3"/><text x="99.3940%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.15%)</title><rect x="99.1440%" y="133" width="0.1511%" height="15" fill="rgb(216,46,15)" fg:x="1969" fg:w="3"/><text x="99.3940%" y="143.50"></text></g><g><title>&lt;aoc_common::position::Position as core::cmp::PartialEq&gt;::eq (3 samples, 0.15%)</title><rect x="99.1440%" y="117" width="0.1511%" height="15" fill="rgb(250,74,19)" fg:x="1969" fg:w="3"/><text x="99.3940%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.15%)</title><rect x="99.2951%" y="181" width="0.1511%" height="15" fill="rgb(249,42,33)" fg:x="1972" fg:w="3"/><text x="99.5451%" y="191.50"></text></g><g><title>aoc_2023_23::find_longest_path2 (1,694 samples, 85.30%)</title><rect x="14.4008%" y="293" width="85.2971%" height="15" fill="rgb(242,149,17)" fg:x="286" fg:w="1694"/><text x="14.6508%" y="303.50">aoc_2023_23::find_longest_path2</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (201 samples, 10.12%)</title><rect x="89.5770%" y="277" width="10.1208%" height="15" fill="rgb(244,29,21)" fg:x="1779" fg:w="201"/><text x="89.8270%" y="287.50">std::collection..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (201 samples, 10.12%)</title><rect x="89.5770%" y="261" width="10.1208%" height="15" fill="rgb(220,130,37)" fg:x="1779" fg:w="201"/><text x="89.8270%" y="271.50">hashbrown::map:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (201 samples, 10.12%)</title><rect x="89.5770%" y="245" width="10.1208%" height="15" fill="rgb(211,67,2)" fg:x="1779" fg:w="201"/><text x="89.8270%" y="255.50">hashbrown::map:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (33 samples, 1.66%)</title><rect x="98.0363%" y="229" width="1.6616%" height="15" fill="rgb(235,68,52)" fg:x="1947" fg:w="33"/><text x="98.2863%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (33 samples, 1.66%)</title><rect x="98.0363%" y="213" width="1.6616%" height="15" fill="rgb(246,142,3)" fg:x="1947" fg:w="33"/><text x="98.2863%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (31 samples, 1.56%)</title><rect x="98.1370%" y="197" width="1.5609%" height="15" fill="rgb(241,25,7)" fg:x="1949" fg:w="31"/><text x="98.3870%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.25%)</title><rect x="99.4461%" y="181" width="0.2518%" height="15" fill="rgb(242,119,39)" fg:x="1975" fg:w="5"/><text x="99.6961%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.25%)</title><rect x="99.4461%" y="165" width="0.2518%" height="15" fill="rgb(241,98,45)" fg:x="1975" fg:w="5"/><text x="99.6961%" y="175.50"></text></g><g><title>aoc-2023-23 (1,981 samples, 99.75%)</title><rect x="0.0000%" y="469" width="99.7482%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="1981"/><text x="0.2500%" y="479.50">aoc-2023-23</text></g><g><title>_start (1,695 samples, 85.35%)</title><rect x="14.4008%" y="453" width="85.3474%" height="15" fill="rgb(241,142,54)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="463.50">_start</text></g><g><title>__libc_start_main_impl (1,695 samples, 85.35%)</title><rect x="14.4008%" y="437" width="85.3474%" height="15" fill="rgb(222,85,15)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="447.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,695 samples, 85.35%)</title><rect x="14.4008%" y="421" width="85.3474%" height="15" fill="rgb(210,85,47)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="431.50">__libc_start_call_main</text></g><g><title>main (1,695 samples, 85.35%)</title><rect x="14.4008%" y="405" width="85.3474%" height="15" fill="rgb(224,206,25)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (1,695 samples, 85.35%)</title><rect x="14.4008%" y="389" width="85.3474%" height="15" fill="rgb(243,201,19)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (1,695 samples, 85.35%)</title><rect x="14.4008%" y="373" width="85.3474%" height="15" fill="rgb(236,59,4)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="383.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,695 samples, 85.35%)</title><rect x="14.4008%" y="357" width="85.3474%" height="15" fill="rgb(254,179,45)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,695 samples, 85.35%)</title><rect x="14.4008%" y="341" width="85.3474%" height="15" fill="rgb(226,14,10)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc_2023_23::main (1,695 samples, 85.35%)</title><rect x="14.4008%" y="325" width="85.3474%" height="15" fill="rgb(244,27,41)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="335.50">aoc_2023_23::main</text></g><g><title>aoc_2023_23::part2 (1,695 samples, 85.35%)</title><rect x="14.4008%" y="309" width="85.3474%" height="15" fill="rgb(235,35,32)" fg:x="286" fg:w="1695"/><text x="14.6508%" y="319.50">aoc_2023_23::part2</text></g><g><title>aoc_2023_23::grid_to_graph (1 samples, 0.05%)</title><rect x="99.6979%" y="293" width="0.0504%" height="15" fill="rgb(218,68,31)" fg:x="1980" fg:w="1"/><text x="99.9479%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;aoc_common::position::Position&gt;&gt; (1 samples, 0.05%)</title><rect x="99.6979%" y="277" width="0.0504%" height="15" fill="rgb(207,120,37)" fg:x="1980" fg:w="1"/><text x="99.9479%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;aoc_common::position::Position&gt;&gt; (1 samples, 0.05%)</title><rect x="99.6979%" y="261" width="0.0504%" height="15" fill="rgb(227,98,0)" fg:x="1980" fg:w="1"/><text x="99.9479%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="99.6979%" y="245" width="0.0504%" height="15" fill="rgb(207,7,3)" fg:x="1980" fg:w="1"/><text x="99.9479%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.05%)</title><rect x="99.6979%" y="229" width="0.0504%" height="15" fill="rgb(206,98,19)" fg:x="1980" fg:w="1"/><text x="99.9479%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.05%)</title><rect x="99.6979%" y="213" width="0.0504%" height="15" fill="rgb(217,5,26)" fg:x="1980" fg:w="1"/><text x="99.9479%" y="223.50"></text></g><g><title>__GI___libc_free (1 samples, 0.05%)</title><rect x="99.6979%" y="197" width="0.0504%" height="15" fill="rgb(235,190,38)" fg:x="1980" fg:w="1"/><text x="99.9479%" y="207.50"></text></g><g><title>_int_free (1 samples, 0.05%)</title><rect x="99.6979%" y="181" width="0.0504%" height="15" fill="rgb(247,86,24)" fg:x="1980" fg:w="1"/><text x="99.9479%" y="191.50"></text></g><g><title>all (1,986 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(205,101,16)" fg:x="0" fg:w="1986"/><text x="0.2500%" y="495.50"></text></g><g><title>perf-exec (5 samples, 0.25%)</title><rect x="99.7482%" y="469" width="0.2518%" height="15" fill="rgb(246,168,33)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="453" width="0.2518%" height="15" fill="rgb(231,114,1)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="437" width="0.2518%" height="15" fill="rgb(207,184,53)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="421" width="0.2518%" height="15" fill="rgb(224,95,51)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="405" width="0.2518%" height="15" fill="rgb(212,188,45)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="389" width="0.2518%" height="15" fill="rgb(223,154,38)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="373" width="0.2518%" height="15" fill="rgb(251,22,52)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="357" width="0.2518%" height="15" fill="rgb(229,209,22)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="341" width="0.2518%" height="15" fill="rgb(234,138,34)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="325" width="0.2518%" height="15" fill="rgb(212,95,11)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="309" width="0.2518%" height="15" fill="rgb(240,179,47)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="99.7482%" y="293" width="0.2518%" height="15" fill="rgb(240,163,11)" fg:x="1981" fg:w="5"/><text x="99.9982%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.20%)</title><rect x="99.7986%" y="277" width="0.2014%" height="15" fill="rgb(236,37,12)" fg:x="1982" fg:w="4"/><text x="100.0486%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.20%)</title><rect x="99.7986%" y="261" width="0.2014%" height="15" fill="rgb(232,164,16)" fg:x="1982" fg:w="4"/><text x="100.0486%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.20%)</title><rect x="99.7986%" y="245" width="0.2014%" height="15" fill="rgb(244,205,15)" fg:x="1982" fg:w="4"/><text x="100.0486%" y="255.50"></text></g></svg></svg>